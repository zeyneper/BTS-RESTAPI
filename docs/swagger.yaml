basePath: /api/v1
definitions:
  models.Book:
    properties:
      id:
        type: integer
      pageNumber:
        type: integer
      title:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      age:
        type: integer
      books:
        items:
          $ref: '#/definitions/models.Book'
        type: array
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      surname:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /book:
    get:
      description: Responds with the list of all books as JSON
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "400":
          description: Bad Request
      summary: Get all books array
      tags:
      - Books
    post:
      description: Returns the book whit specific ID
      parameters:
      - description: Book JSON
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
      summary: Create a new book JSON and stores in DB. Returns saved JSON.
      tags:
      - Books
  /book/{id}:
    delete:
      description: Deletes book with specific Id
      parameters:
      - description: delete book by Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Delete book by Id
      tags:
      - Books
    get:
      description: Returns the book whit specific ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
      summary: Get book by Id
      tags:
      - Books
  /user/:
    get:
      consumes:
      - application/json
      description: Get User
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get User Object
      tags:
      - example
    post:
      consumes:
      - application/json
      description: Create User
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create User Object
      tags:
      - example
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: delete by id user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: DeleteUser an user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Update a user by ID
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
